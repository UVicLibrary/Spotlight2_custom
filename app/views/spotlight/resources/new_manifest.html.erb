<%# console %>
<%= render "spotlight/shared/exhibit_sidebar" %>
<div id="content" class="col-md-9">
    <%= curation_page_title t("Add compound object") %>
<div class="main-container">

<p>Combine multiple items into one object (e.g. several pages in the same book). Items must be <%= link_to "uploaded", new_exhibit_resource_path(current_exhibit) %> images.</p>
<div class="row">
<%= bootstrap_form_for([current_exhibit, @resource.becomes(Spotlight::Resources::Upload)], layout: :horizontal, label_col: 'col-md-2', control_col: 'col-sm-6 col-md-6', html: { class: 'item-upload-form'} ) do |resource| %>
  <%= resource.fields_for :data do |d| %>
    <% Spotlight::Resources::Upload.fields(current_exhibit).each do |config| %>
      <%= d.send(config.form_field_type, config.field_name, label: uploaded_field_label(config)) %>
    <% end %>
  <% end %>

<!-- Item IDs field -->
  <div class="form-group item-ids-field">
    <div class = "col-sm-6 col-md-6 item-ids-input">
      <input class="form-control" type="hidden" name="resources_upload[compound_ids][]" id="resources_upload_compound_ids"/>
    </div>
  </div>


<!-- Range slider, see https://refreshless.com/nouislider/ -->
<div class="row">

  <div class="form-check col-md-12" id="range-option">
    <label class="form-check-label control-label col-md-4" for="toggleSelection1">
    <input class="form-check-input pull-left" type="radio" name="toggleSelection" id="toggleSelection1" value="range">
    Select a range of item IDs</label>
  </div>

  <div class="col-sm-6 col-md-6 col-lg-6 col-lg-offset-2 col-md-offset-2" id="slider"></div>

  <div class="form-actions">
    <div class="primary-actions">
      <%= cancel_link @resource, :back, class: 'btn btn-default' %>
      <%= resource.submit 'Add compound object', class: 'btn btn-primary submit-compound-object' %>
    </div>
  </div>
  <% end %><!-- bootstrap_form_for -->

<!-- Search for an item -->
<div class="form-check col-md-12" id="search-option">
  <label class="form-check-label control-label col-sm-3 col-md-3 col-lg-3" for="toggleSelection2">
    <input class="form-check-input pull-left" type="radio" name="toggleSelection" id="toggleSelection2" value="search" checked >
  Or Look up an Item</label>
</div>

</div><!-- row -->

<div class="form-group form-inline col-md-12" id="resources-lookup">
    <%= form_tag(exhibit_resources_path, remote: true, method: :get, class: "col-md-9 col-lg-9") do %>
    <%= text_field_tag(:q, "", class: 'form-control', style:'width: 40%', placeholder: "Title or description", disabled: false, id: "search-field") %>
    <%= button_tag(type: :submit, class: "btn btn-large btn-secondary", disabled: false, id: "submit-search") do %>
      Search
    <% end %>
    <%= link_to 'See all items', admin_exhibit_catalog_path(current_exhibit), target: "_blank", style: "padding-left: 1em;" %>
  <% end %>
</div><!-- /#resources-lookup -->


<!-- Panels added from search-->
<div class="row">
  <div class="panel-group dd col-sm-6 col-md-6 col-lg-6">
    <ol id="items">
    </ol>
  </div>
</div>

</div><!-- /.row -->

<!-- <div class="row"> -->
  <div id="results" class="col-md-10 offset-md-2">
      <%= render 'results' %>
  </div>
<!-- </div> -->
  </div>
  </div>

<script>

  $( document ).on('turbolinks:load', function() {

    // Validate item IDs
    $('.submit-compound-object').click(function(e) {
      errorMessage = '<span class="invalid-feedback">You did not define Item IDs for your compound object.</span>'
      // If the IDs field is empty or blank
      if (!$('#resources_upload_compound_ids').val() || $('#resources_upload_compound_ids').val() == '""') {
        e.preventDefault();
        if (!$('.item-ids-field span').length) {
          $('.item-ids-field').append(errorMessage);
        }
      }
    });
    // Start slider disabled by default
    slider.setAttribute('disabled', true);
    // Events for buttons and sortable panels
    $('#results').on('click', '.add-doc-id', addPanel);
    $(document).on('click', '.remove-id', removePanel);
  }); // turbolinks:load

  function checkRadio() {
    return $('input[name="toggleSelection"]:checked').val();
  }

  // Toggle search or range selection based on radio buttons
  $(document).on('click', '.form-check-label', function() {
    if (checkRadio() == 'range') {
      slider.removeAttribute('disabled');
      sortable.option('sort', false);  // Disable panel sorting
      $('#results').off('click'); // Disable adding panels
      $('a.add-doc-id button').prop('disabled', true);
      $(document).off('click', '.remove-id'); // Disable removing panels
      $('.panel-heading').css('opacity','0.6'); // Fade disabled panels
      // Fill in form with initial values and update any time the handles move
      updateRangeIds();
      slider.noUiSlider.on('change', updateRangeIds);
    }
    else { // search option selected
      // Disable range options, enable search
      slider.setAttribute('disabled', true);
      sortable.option('sort', true);
      $('a.add-doc-id button').prop('disabled', false);
      $('#results').off('click').on('click', '.add-doc-id', addPanel); // Enable adding panels
      $(document).on('click', '.remove-id', removePanel); // Enable removing panels
      $('.panel-heading').css('opacity','1');// Unfade panels
      updateIdsOrder();
    }
  });

//==========================================================================================================//

// RANGE SLIDER

  // Slider for selecting a range of item IDs
  // https://www.rubydoc.info/gems/nouislider-rails/8.2.1#Usage
  var slider = document.getElementById('slider');

  // Find the max and min Item ID of all items in this exhibit
  var max_doc_id = <%= current_exhibit.solr_document_sidecars.pluck(:resource_id).max %>;
  var min_doc_id = <%= current_exhibit.solr_document_sidecars.pluck(:resource_id).min %>;
  var prefix = '<%= current_exhibit.id %>-'

  noUiSlider.create(slider, {
      start: [min_doc_id + ((max_doc_id - min_doc_id)/3),
      max_doc_id - ((max_doc_id - min_doc_id)/3)],
      step: 1,
      connect: true,
      orientation: 'horizontal',
      range: {
          'min': min_doc_id,
          'max': max_doc_id
      },
      tooltips: true,
      format: wNumb({
        decimals: 0,
        prefix: prefix
      }), // https://refreshless.com/wnumb/
      pips: {
        mode: 'positions',
        values: [0, 25, 50, 75, 100],
        density: 4
      }
  });

  $('.noUi-handle').mouseup(function() {
      $(this).css('z-index','inherit');
    })
    .mousedown(function() {
      $(this).css('z-index','1');
  });


  // Takes an array of integers and adds them to the Items ID form with quotes
  function updateRangeIds() {
    // get values from handles
    var newValues = slider.noUiSlider.get();
    // find or update the range
    var minValue = newValues[0].split("-")[1];
    var maxValue = newValues[1].split("-")[1];
    var range = parseInt(maxValue - minValue);
    var ids = [];
    var i;

    for (i = 0; i <= range; i++) { // returns a list of item IDs within that range
      id = parseInt(minValue) + i;
      ids.push(prefix + id);
    }

    // Find all images in the exhibit between a certain range
    <% image_ids_array = [] %>
    <% images = current_exhibit.resources.select{|r| r.file_type =="image"} %>
    <% images.each do |img| %>
      <% image_ids_array.push(img.solr_document_sidecars.first.document_id) %>
    <% end %>
    var exhibitImages = <%= raw image_ids_array.compact %>; // Filters out nil values and non-images
    var validIds = ids.filter(function(val){ // Only include IDs that have corresponding documents
      return exhibitImages.indexOf(val) != -1;
    });

    var quotedIds = '"' + validIds.join('","') + '"';
    $('#resources_upload_compound_ids').val(quotedIds); // Fill in the Items ID form
  }

  // See slider in the bottom script of views/resources/new_manifest.html.erb
    var idsInOrder = [];

    // Update the order of compound ids with quotation marks and separated by commas ("1-385","1-386")
    function updateIdsOrder() {
      idsInOrder = [];
      // console.log("Sorted!");
      $('.panel-heading').each(function(){
        idsInOrder.push($(this).attr('id'));
      });
      var quotedIds = '"' + idsInOrder.join('","') + '"';
      $('#resources_upload_compound_ids').val(quotedIds);
    }

//==========================================================================================================//

// SEARCH AND PANELS

    // Create sortable panels for search option
    // See https://sortablejs.github.io/Sortable/
    var sortable = new Sortable(items, {
        ghostClass: 'ghost',
        sort: true,
        onSort: function() {
          updateIdsOrder();
        }
    });

    function addPanel() {
      // Grab the appropriate title from the link clicked
      var title = $(this).parents('tr').find('.title').text();//.text();
      // Add compound ID to text box
      var doc = $(this).parents('tr').find('.doc-id > span').text();
      var docSpan = '<span class="doc-span">' + doc + '</span>';

      panelContent =
      '<li>' +
      '<div class="dd3-content panel panel-default page-admin">' +
          '<div class="dd-handle dd3-handle"></div>' +
          '<div class="panel-heading" id="' + doc + '">' + docSpan + title +
            '<a class="btn btn-link remove-id">' + '<span class="glyphicon glyphicon-remove remove-button" aria-hidden="true"></span>' +
            '</a>' +
          '</div>' +
          '</div>' +
      '</div>' +
      '</li>'
      $('.panel-group > ol').append(panelContent);
      updateIdsOrder();
    }

    function removePanel() {
      $(this).parents('.dd3-content.panel').remove();
      updateIdsOrder();
    }


</script>
